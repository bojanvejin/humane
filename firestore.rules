rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function authed() { return request.auth != null; }
    function has(role) { return authed() && request.auth.token.roles[role] == true; } // Assuming roles are stored as map { "roleName": true }

    match /users/{uid} {
      allow read: if authed() && (request.auth.uid == uid || has('admin'));
      allow write: if request.auth.uid == uid;
    }

    match /artists/{id} {
      allow read: if true; // public
      allow create, update: if has('artist') && request.auth.uid == resource.data.ownerUserId;
    }

    // Plays are written by Cloud Functions, so direct client writes are forbidden
    match /plays/{period}/{id} {
      allow read: if has('admin');
      allow write: if false; // server-only via Cloud Functions
    }

    // Raw plays are written by authenticated users, but validated server-side
    match /plays_raw/{period}/events/{id} {
      allow read: if has('admin');
      allow write: if authed(); // Client can write raw plays, but they are materialized by a CF
    }

    // UserTrackAggregate for deduplication, written by Cloud Functions
    match /userTrackAgg/{id} {
      allow read: if has('admin');
      allow write: if false; // server-only via Cloud Functions
    }

    // Tracks are managed by artists/admins
    match /tracks/{trackId} {
      allow read: if true; // Public read for tracks
      allow create: if has('artist') || has('admin');
      allow update, delete: if has('admin') || (has('artist') && request.auth.uid == resource.data.artistId);
    }

    // Subscriptions are managed by users
    match /subscriptions/{subId} {
      allow read: if authed() && (request.auth.uid == resource.data.userId || has('admin'));
      allow create: if authed() && request.auth.uid == request.resource.data.userId;
      allow update, delete: if has('admin'); // Only admin can update/delete subscriptions directly
    }

    // Tips are managed by users
    match /tips/{tipId} {
      allow read: if authed() && (request.auth.uid == resource.data.fromUserId || has('admin'));
      allow create: if authed() && request.auth.uid == request.resource.data.fromUserId;
      allow update, delete: if has('admin');
    }

    // Payouts are server-generated and admin-readable
    match /payouts/{payoutId} {
      allow read: if has('admin') || (has('artist') && request.auth.uid == resource.data.artistId);
      allow write: if false; // server-only
    }

    // Webhook events are server-only
    match /webhooks/events/{eventId} {
      allow read: if has('admin');
      allow write: if false; // server-only
    }
  }
}